<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="152" tokens="190">
<file line="187" path="C:\Users\mepeisen\git\maven-php-plugin\new-style\tags\2.0.0-beta-1\maven-php-plugin\src\main\java\org\phpmaven\plugin\build\AbstractPhpMojo.java"/>
<file line="192" path="C:\Users\mepeisen\git\maven-php-plugin\new-style\tags\2.0.0-beta-1\maven-php-plugin\src\main\java\org\phpmaven\plugin\report\AbstractPhpReportMojo.java"/>
<codefragment>
<![CDATA[
    }

    // methods for IPhpConfigurationMojo
    
    /**
     * Represents the maven project.
     *
     * @return the current maven project.
     */
    @Override
    public MavenProject getProject() {
        return project;
    }

    /**
     * Path to the PHP executable.
     *
     * @return path of the php executable
     */
    @Override
    public String getPhpExecutable() {
        return phpExecutable;
    }

    /**
     * Parameters which should be added to the generated PHP parameters.
     *
     * @return additional arguments for php execution
     */
    @Override
    public String getAdditionalPhpParameters() {
        return additionalPhpParameters;
    }

    /**
     * Where the dependencies should be unpacked to.
     *
     * @return where to store the dependency files
     */
    @Override
    public File getDependenciesTargetDirectory() {
        return this.dependenciesTargetDirectory;
    }

    /**
     * Where the test dependencies should be unpacked to.
     *
     * @return where to store the test dependency files
     */
    @Override
    public File getTestDependenciesTargetDirectory() {
        return this.testDependenciesTargetDirectory;
    }
    
    /**
     * Where the sources should get copied to.
     *
     * @return where the jar inclusion directory is
     */
    @Override
    public File getTargetClassesDirectory() {
        return this.targetClassesDirectory;
    }

    /**
     * The target directory where to copy the test sources to.
     *
     * @return where the test-jar inclusion directory is
     */
    @Override
    public File getTargetTestClassesDirectory() {
        return this.targetTestClassesDirectory;
    }

    /**
     * Returns if include errors should be ignored.
     *
     * @return if include errors should be ignored
     */
    @Override
    public boolean isIgnoreIncludeErrors() {
        return ignoreIncludeErrors;
    }

    /**
     * Returns if output from the PHP executable should be logged.
     *
     * @return if php output will be printed to the log
     */
    @Override
    public boolean isLogPhpOutput() {
        return logPhpOutput;
    }

    /**
     * The file of the temporary script used to execute temporary php actions.
     * 
     * @return temporary script filename.
     */
    @Override
    public File getTemporaryScriptFilename() {
        return this.temporaryScriptFile;
    }

    /**
     * Returns the Project builder to be used.
     * @return the project builder
     */
    @Override
    public ProjectBuilder getMavenProjectBuilder() {
        return this.mavenProjectBuilder;
    }
    
    /**
     * Returns the The Maven session to be used.
     * @return the maven session.
     */
    @Override
    public MavenSession getSession() {
        return this.session;
    }
    
    // end of methods for IPhpConfigurationMojo
    
    // methods for IPhpWalkConfigurationMojo
    
    /**
     * Returns files and directories to exclude.
     * @return files and directories to exclude.
     */
    @Override
    public String[] getExcludes() {
        return this.excludes;
    }

    /**
     * Returns files and directories to include.
     * @return files and directories to include.
     */
    @Override
    public String[] getIncludes() {
        return this.includes;
    }

    /**
     * Returns how php files will be identified after the last point.
     * @return how php files will be identified after the last point.
     */
    @Override
    public String getPhpFileEnding() {
        return this.phpFileEnding;
    }
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="140">
<file line="321" path="C:\Users\mepeisen\git\maven-php-plugin\new-style\tags\2.0.0-beta-1\maven-php-plugin\src\main\java\org\phpmaven\plugin\pear\PearPackageInfo.java"/>
<file line="355" path="C:\Users\mepeisen\git\maven-php-plugin\new-style\tags\2.0.0-beta-1\maven-php-plugin\src\main\java\org\phpmaven\plugin\pear\PearPackageInfo.java"/>
<codefragment>
<![CDATA[
    private void parseOptionalDep(final LineTokenizer tokenizer, String token) {
        if (token.startsWith(PROLOG_PACKAGE))
        {
            String packageName = token.substring(PROLOG_PACKAGE.length()).trim(); // maybe a line feed before the package name starts
            if (packageName.length() == 0)
            {
                packageName = tokenizer.nextToken().trim();
            }
            if (tokenizer.hasMoreTokens())
            {
                String token2 = tokenizer.nextToken().trim();
                if (token2.length() == 0) token2 = tokenizer.nextToken().trim(); // maybe an empty line that we fetched first
                if (token2.startsWith(PROLOG_PACKAGE_VERSION))
                {
                    final String version = token2.substring(PROLOG_PACKAGE_VERSION.length(), token2.indexOf(" ", PROLOG_PACKAGE_VERSION.length()));
                    this.pkgDependenciesOptional.add(new PearDependency(packageName, version));
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="114">
<file line="313" path="C:\Users\mepeisen\git\maven-php-plugin\new-style\tags\2.0.0-beta-1\maven-php-plugin\src\main\java\org\phpmaven\plugin\build\PhpTest.java"/>
<file line="389" path="C:\Users\mepeisen\git\maven-php-plugin\new-style\tags\2.0.0-beta-1\maven-php-plugin\src\main\java\org\phpmaven\plugin\build\PhpTest.java"/>
<codefragment>
<![CDATA[
            executeTest(file, targetFile);
        }
   
        getLog().info("\n\nResults :\n\n");
   
        int completeTests = 0;
        int completeFailures = 0;
        int completeErrors = 0;
   
        for (SurefireResult surefireResult : surefireResults) {
            completeTests += surefireResult.getTests();
            completeFailures += surefireResult.getFailure();
            completeErrors += surefireResult.getErrors();
        }
   
        getLog().info("\n\nTests run: " + completeTests
            + ", Failures: " + completeFailures
            + ", Errors: " + completeErrors + "\n");
   
        if (completeErrors != 0 || completeFailures != 0) {
            if (this.testFailureIgnore) {
                getLog().info(IGNORING_TEST_FAILURES_TEXT);
            } else {
                throw new UnitTestCaseFailureException(completeErrors, completeFailures);
            }
        }
    }

    /**
     * Performs the testing by performing only one phpunit invocation.
     * 
     * @param files files to test.
     * @throws IOException thrown if there were io errors.
     * @throws PhpException thrown on php failures.
     * @throws MojoExecutionException thrown if on errors.
     * @throws UnitTestCaseFailureException thrown on unit testing failures.
     */
    private void doTestingSingleInvocation(final Iterable<File> files) throws IOException,
]]>
</codefragment>
</duplication>
<duplication lines="18" tokens="105">
<file line="170" path="C:\Users\mepeisen\git\maven-php-plugin\new-style\tags\2.0.0-beta-1\maven-php-plugin\src\main\java\org\phpmaven\plugin\pear\PearPackageInfo.java"/>
<file line="245" path="C:\Users\mepeisen\git\maven-php-plugin\new-style\tags\2.0.0-beta-1\maven-php-plugin\src\main\java\org\phpmaven\plugin\pear\PearPackageInfo.java"/>
<codefragment>
<![CDATA[
                    final int indexOf = token.indexOf(">");
                    maintainer.setEmail(token.substring(1, indexOf));
                    if (indexOf < token.length() - 1)
                    {
                        final String sub = token.substring(indexOf + 1).trim();
                        if (sub.startsWith("(") && sub.endsWith(")"))
                        {
                            maintainer.setRole(sub.substring(1, sub.length() - 1));
                        }
                        else
                        {
                            throw new IllegalStateException("Unable to parse email and role from " + tokenUntrimmed);
                        }
                    }
                }
                else
                {
                    maintainer.setName(token);
]]>
</codefragment>
</duplication>
<duplication lines="12" tokens="101">
<file line="417" path="C:\Users\mepeisen\git\maven-php-plugin\new-style\tags\2.0.0-beta-1\maven-php-plugin\src\main\java\org\phpmaven\plugin\php\PhpMojoHelper.java"/>
<file line="452" path="C:\Users\mepeisen\git\maven-php-plugin\new-style\tags\2.0.0-beta-1\maven-php-plugin\src\main\java\org\phpmaven\plugin\php\PhpMojoHelper.java"/>
<codefragment>
<![CDATA[
    public void prepareCompileDependencies() throws IOException, PhpException {
        final List<String> packedElements = new ArrayList<String>();
        @SuppressWarnings("unchecked")
        final Set<Artifact> deps = this.project.getArtifacts();
        for (final Artifact dep : deps) {
            this.log.debug("dependency " + 
                dep.getGroupId() + ":" + 
                dep.getArtifactId() + ":" +
                dep.getVersion() + ":" +
                dep.getScope() + "@" +
                dep.getFile().getAbsolutePath());
            if (Artifact.SCOPE_TEST.equals(dep.getScope())) {
]]>
</codefragment>
</duplication>
</pmd-cpd>